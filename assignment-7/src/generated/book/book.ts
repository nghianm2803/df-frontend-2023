/**
 * Generated by orval v6.18.1 üç∫
 * Do not edit manually.
 * Swagger API
 * This is a swagger for API.
 * OpenAPI spec version: 1.0
 */
import axios from 'axios'
import type {
  AxiosRequestConfig,
  AxiosResponse,
  AxiosError
} from 'axios'
import useSwr from 'swr'
import type {
  SWRConfiguration,
  Key
} from 'swr'
import type {
  BooksResponse,
  ErrorResponse,
  GetBooksParams,
  BookResponse,
  CreateBookRequest,
  UpdateBookRequest,
  MessageResponse
} from '.././model'


  
  /**
 * Get list of books
 * @summary Get list of books
 */
export const getBooks = (
    params?: GetBooksParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<BooksResponse>> => {
    return axios.get(
      `/books`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetBooksKey = (params?: GetBooksParams,) => [`/books`, ...(params ? [params]: [])] as const;

    
export type GetBooksQueryResult = NonNullable<Awaited<ReturnType<typeof getBooks>>>
export type GetBooksQueryError = AxiosError<ErrorResponse>

/**
 * @summary Get list of books
 */
export const useGetBooks = <TError = AxiosError<ErrorResponse>>(
 params?: GetBooksParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getBooks>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }

  ) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetBooksKey(params) : null);
  const swrFn = () => getBooks(params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * Create new book
 * @summary Create new book
 */
export const createBook = (
    createBookRequest: CreateBookRequest, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<BookResponse>> => {
    return axios.post(
      `/books`,
      createBookRequest,options
    );
  }


/**
 * Get book by id
 * @summary Get book by id
 */
export const getBook = (
    id: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<BookResponse>> => {
    return axios.get(
      `/books/${id}`,options
    );
  }


export const getGetBookKey = (id: number,) => [`/books/${id}`] as const;

    
export type GetBookQueryResult = NonNullable<Awaited<ReturnType<typeof getBook>>>
export type GetBookQueryError = AxiosError<ErrorResponse>

/**
 * @summary Get book by id
 */
export const useGetBook = <TError = AxiosError<ErrorResponse>>(
 id: number, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getBook>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }

  ) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(id)
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetBookKey(id) : null);
  const swrFn = () => getBook(id, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * Update book
 * @summary Update book
 */
export const updateBook = (
    id: number,
    updateBookRequest: UpdateBookRequest, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<BookResponse>> => {
    return axios.put(
      `/books/${id}`,
      updateBookRequest,options
    );
  }


/**
 * Delete book by id
 * @summary Delete book by id
 */
export const deleteBook = (
    id: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<MessageResponse>> => {
    return axios.delete(
      `/books/${id}`,options
    );
  }


